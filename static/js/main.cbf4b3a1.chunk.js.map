{"version":3,"sources":["components/PetName.js","components/PetListContainer.js","App.js","serviceWorker.js","index.js"],"names":["PetNameRender","this","props","ownerName","Component","PetListContainer","state","loading","petData","fetch","response","json","data","setState","console","log","className","map","Pets","index","PetName","key","name","ownerGender","gender","petName","pets","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAQeA,E,iLAJX,OAAO,iCAAOC,KAAKC,MAAMC,UAAlB,S,GAFiBC,aC0CbC,E,2MAxCbC,MAAQ,CACNC,SAAS,EACTC,QAAS,M,2MAIG,0D,SACWC,MADX,2D,cACNC,E,gBACaA,EAASC,O,OAAtBC,E,OACNX,KAAKY,SAAS,CAAEL,QAASI,EAAML,SAAS,IACxCO,QAAQC,IAAId,KAAKK,MAAME,S,qIAGf,IAAD,OACP,OACE,yBAAKQ,UAAU,kBACZf,KAAKK,MAAMC,UAAYN,KAAKK,MAAME,QACjC,2CAEA,6BACGP,KAAKK,MAAME,QAAQS,KAAI,SAACC,EAAMC,GAC7B,OAAI,EAAKb,MAAME,QAEX,kBAACY,EAAD,CACEC,IAAKF,EACLhB,UAAWe,EAAKI,KAChBC,YAAaL,EAAKM,OAClBC,QAASP,EAAKQ,OAIb,uD,GAhCUtB,aCIhBuB,MAHf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cbf4b3a1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass PetNameRender extends Component {\r\n  render() {\r\n    return <div> {this.props.ownerName} </div>;\r\n  }\r\n}\r\n\r\nexport default PetNameRender;\r\n","import React, { Component } from \"react\";\r\nimport PetNameRender from \"./PetName\";\r\n\r\nclass PetListContainer extends Component {\r\n  state = {\r\n    loading: true,\r\n    petData: null\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const url = \"http://agl-developer-test.azurewebsites.net/people.json\";\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    this.setState({ petData: data, loading: false });\r\n    console.log(this.state.petData);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main-container\">\r\n        {this.state.loading || !this.state.petData ? (\r\n          <div>loading...</div>\r\n        ) : (\r\n          <div>\r\n            {this.state.petData.map((Pets, index) => {\r\n              if (this.state.petData)\r\n                return (\r\n                  <PetNameRender\r\n                    key={index}\r\n                    ownerName={Pets.name}\r\n                    ownerGender={Pets.gender}\r\n                    petName={Pets.pets}\r\n                    // PetNa={Pets.pets.name}\r\n                  />\r\n                );\r\n              return <div> Add Property</div>;\r\n            })}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PetListContainer;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport PetListContainer from \"./components/PetListContainer\";\n\nfunction App() {\n  return <PetListContainer />;\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}